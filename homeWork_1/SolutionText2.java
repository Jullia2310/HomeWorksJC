package homeWork_1;


public class SolutionText2 {
    public static void main(String[] args) {
        // Case 2.1
        int a = 8;
        int b = 2;
        int c = 5;
        int d = c + b / a;
        System.out.println("Результат вычисления 1-го выражения: " + d);
        // результат вычисления d будет равен с = 5, так как в таблице приорететов
        // операторов деление / выполняется раньше сложения, т.е. сначала выполнится
        // деление нацело b/a = 2/8

        // Case 2.2
        int d1 = (c + b) / a;
        System.out.println("Результат вычисления 2-го выражения: " + d1);
        // результат вычисления d1 будет равен 0, так как в таблице приорететов
        // операторов выполняется операция в скобках (с + b) = (2 + 5) = 7,
        // а потом выполняется деление нацело, т.е. на 8

        // Case 2.3
        int d2 = (c + b++) / a;
        System.out.println("Результат вычисления 3-го выражения: " + d2);
        // результат вычисления d2 будет равен 0, так как в таблице приорететов
        // операторов выполняется операция ++, затем сложение в скобках с + b,
        // а потом выполняется деление нацело, т.е. на 7 / 8

        // Case 2.4
        int d3 = (c + b++) / --a;
        System.out.println("Результат вычисления 4-го выражения: " + d3);
        // результат вычисления d3 будет равен 1, так как в таблице приорететов
        // операторов выполняются операция "++" или "--", т.е. выполнится --8, затем ++,
        // затем сложение в скобках с + b, а потом выполняется деление нацело,
        // т.е. на 7 / 7

        // Case 2.5
        int d4 = (c * b >> b++) / --a;
        System.out.println("Результат вычисления 5-го выражения: " + d4);
        // результат вычисления d4 будет равен 0, так как в таблице приорететов
        // операторов выполняются операция "++" или "--", т.е. выполнится --8, затем ++,
        // затем умножение в скобках с * b = 10, потом выполняется сдвиг вправо на b,
        // результат операции 2, затем деление нацело т.е. на 7

        // Case 2.6
        int f = 7;
        int g = 20;
        int h = 68;
        int i = 22;
        int d5 = (c + f > g ? h : i * b >> b++) / --a;
        System.out.println("Результат вычисления 6-го выражения: " + d5);
        // результат вычисления d5 будет равен 1, так как в таблице приорететов
        // операторов выполняются операция "++" или "--", т.е. выполнится --8, затем ++,
        // затем выполниться умножение в скобках i * b = 44, затем сложение c + f, затем
        // затем выполняется сдвиг вправо на b (читай
        // деление на 2) результата 44, результат операции 11, затем сравнение результата сложения с g,
        // т.е. 5 + 7 не более чем 20, затем идет применение тернарного оператора ?:, из которого
        // необходимо использовать вторую часть условия, так как первая false, т.е. необходимо 11 делить на 7

        // Case 2.7
        // int d6 = (c + f > g ? h >= h : i * b >> b++) / --a;
        // ошибка компиляции, так как примение оператора >= к 68 (читай h) в этом случае (тернарный
        // оператор) неуместно.

        // Case 2.8
        int j = 6;
        int k = 3;
        int l = 12;
        int m = 119;
        boolean d7 = j - b > k && l * l <= m;
        System.out.println("Результат вычисления 8-го выражения: " + d7);
        // результат выражения false, т.к. сначала выполняется умножение l*l, результат 144,
        // далее вычитание j - b, результат 4, затем идет применение оператора <=, т.е. 144 <= 119 - false,
        // далее применяется оператор >, т.е. 4 > 3 - true, далее применяется логический оператор &&,
        // применение которого дает true только в случае когда выражения по обе стороны от него тоже true

        // Case 2.9
        boolean n = true;
        boolean o = false;
        boolean d8 = n && o;
        System.out.println("Результат вычисления 8-го выражения: " + d8);
        // результат выражения false, так как значания по обе стороны от логический оператор &&, принимают
        // разные значения, чтобы было true значения должны логически совпадать.
    }
}
